{"version":3,"file":"Exam.js","names":["_react","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_i18n","_paragon","_icons","_timer","_instructions","_context","_ExamAPIError","_constants","_messages","_jsxRuntime","obj","__esModule","_getRequireWildcardCache","e","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","Array","from","test","len","length","arr2","l","Symbol","iterator","f","next","done","push","value","isArray","Exam","_ref","isGated","isTimeLimited","originalUserIsStaff","canAccessProctoredExams","children","intl","state","useContext","ExamStateContext","isLoading","activeAttempt","showTimer","stopExam","exam","expireExam","pollAttempt","apiErrorMsg","pingAttempt","getProctoringSettings","submitExam","_ref2","attempt","examType","type","examId","id","passedDueDate","passed_due_date","hideAfterDue","hide_after_due","_ref3","attemptStatus","attempt_status","shouldShowMasqueradeAlert","ExamType","TIMED","ExamStatus","STARTED","_useState","useState","_useState2","hasProctoredExamAccess","setHasProctoredExamAccess","proctoredExamTypes","ONBOARDING","PRACTICE","PROCTORED","useEffect","includes","jsx","className","Spinner","animation","variant","formatMessage","messages","proctoredExamAccessDenied","sequenceContent","Fragment","jsxs","Alert","icon","Info","FormattedMessage","defaultMessage","ExamTimerBlock","stopExamAttempt","expireExamAttempt","pollExamAttempt","propTypes","PropTypes","bool","isRequired","element","intlShape","defaultProps","_default","exports","injectIntl"],"sources":["../../src/exam/Exam.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert, Spinner } from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\nimport { ExamTimerBlock } from '../timer';\nimport Instructions from '../instructions';\nimport ExamStateContext from '../context';\nimport ExamAPIError from './ExamAPIError';\nimport { ExamStatus, ExamType } from '../constants';\nimport messages from './messages';\n\n/**\n * Exam component is intended to render exam instructions before and after exam.\n * It is also responsible for rendering exam timer block/component during the exam.\n * If children do not relate to exam sequence, render them directly.\n * @param isTimeLimited - boolean used to identify if we need to process sequence as an exam\n * @param children - sequence content\n * @returns {JSX.Element}\n * @constructor\n */\nconst Exam = ({\n  isGated, isTimeLimited, originalUserIsStaff, canAccessProctoredExams, children, intl,\n}) => {\n  const state = useContext(ExamStateContext);\n  const {\n    isLoading, activeAttempt, showTimer, stopExam, exam,\n    expireExam, pollAttempt, apiErrorMsg, pingAttempt,\n    getProctoringSettings, submitExam,\n  } = state;\n\n  const {\n    attempt,\n    type: examType,\n    id: examId,\n    passed_due_date: passedDueDate,\n    hide_after_due: hideAfterDue,\n  } = exam || {};\n  const { attempt_status: attemptStatus } = attempt || {};\n\n  const shouldShowMasqueradeAlert = () => {\n    // if course staff is masquerading as a specific learner, they should be able\n    // to view the exam content regardless of the learner's current state\n    if (originalUserIsStaff && isTimeLimited) {\n      if (examType === ExamType.TIMED && passedDueDate && !hideAfterDue) {\n        // if the learner is able to view exam content after the due date is passed,\n        // don't show this alert\n        return false;\n      }\n      return attemptStatus !== ExamStatus.STARTED;\n    }\n    return false;\n  };\n\n  const [hasProctoredExamAccess, setHasProctoredExamAccess] = useState(true);\n\n  const proctoredExamTypes = [ExamType.ONBOARDING, ExamType.PRACTICE, ExamType.PROCTORED];\n\n  useEffect(() => {\n    if (proctoredExamTypes.includes(examType)) {\n      // only fetch proctoring settings for a proctored exam\n      if (examId) {\n        getProctoringSettings();\n      }\n\n      // Only exclude Timed Exam when restricting access to exams\n      setHasProctoredExamAccess(canAccessProctoredExams);\n    }\n    // this makes sure useEffect gets called only one time after the exam has been fetched\n    // we can't leave this empty since initially exam is just an empty object, so\n    // API calls above would not get triggered\n  }, [examId]);\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"spinner\" className=\"d-flex justify-content-center align-items-center flex-column my-5 py-5\">\n        <Spinner animation=\"border\" variant=\"primary\" />\n      </div>\n    );\n  }\n\n  if (!hasProctoredExamAccess) {\n    // If the user cannot acces proctoring exam, and the current exam is a proctoring exam,\n    // we want to display a message box to let learner know they have no access.\n    return (\n      <div data-testid=\"no-access\" className=\"d-flex justify-content-center align-items-center flex-column\">\n        {intl.formatMessage(messages.proctoredExamAccessDenied)}\n      </div>\n    );\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  const sequenceContent = <>{children}</>;\n\n  return (\n    <div className=\"d-flex flex-column justify-content-center\">\n      {shouldShowMasqueradeAlert() && (\n        <Alert variant=\"info\" icon={Info} data-testid=\"masquerade-alert\">\n          <FormattedMessage\n            id=\"exam.hiddenContent\"\n            defaultMessage=\"This exam is hidden from the learner.\"\n          />\n        </Alert>\n      )}\n      {showTimer && (\n        <ExamTimerBlock\n          attempt={activeAttempt}\n          stopExamAttempt={stopExam}\n          submitExam={submitExam}\n          expireExamAttempt={expireExam}\n          pollExamAttempt={pollAttempt}\n          pingAttempt={pingAttempt}\n        />\n      )}\n      { // show the error message only if you are in the exam sequence\n        isTimeLimited && apiErrorMsg && <ExamAPIError />\n      }\n      {isTimeLimited && !originalUserIsStaff && !isGated\n        ? <Instructions>{sequenceContent}</Instructions>\n        : sequenceContent}\n    </div>\n  );\n};\n\nExam.propTypes = {\n  isTimeLimited: PropTypes.bool.isRequired,\n  isGated: PropTypes.bool.isRequired,\n  originalUserIsStaff: PropTypes.bool.isRequired,\n  canAccessProctoredExams: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  intl: intlShape.isRequired,\n};\n\nExam.defaultProps = {\n  canAccessProctoredExams: true,\n};\n\nexport default injectIntl(Exam);\n"],"mappings":"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","ignoreList":[]}