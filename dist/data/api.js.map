{"version":3,"file":"api.js","names":["_frontendPlatform","require","_auth","_constants","_helpers","BASE_API_URL","fetchActiveAttempt","activeAttemptUrl","URL","getConfig","EXAMS_BASE_URL","activeAttemptResponse","getAuthenticatedHttpClient","get","href","data","fetchAttemptForExamSequnceId","sequenceId","attemptUrl","searchParams","append","attemptResponse","fetchExamAttemptsData","courseId","url","LMS_BASE_URL","urlResponse","examUrl","examResponse","exam","total_time","Number","isInteger","generateHumanizedTime","attemptData","active_attempt","fetchLatestAttempt","pollExamAttempt","pollUrl","edxProctoringURL","attempt_status","status","createExamAttempt","examId","legacyAttempt","startClock","arguments","length","undefined","attemptProctored","urlString","payload","exam_id","start_clock","toString","attempt_proctored","post","updateAttemptStatus","attemptId","action","detail","put","stopAttempt","ExamAction","STOP","continueAttempt","START","submitAttempt","SUBMIT","resetAttempt","RESET","endExamWithFailure","error","ERROR","softwareDownloadAttempt","CLICK_DOWNLOAD_SOFTWARE","declineAttempt","DECLINE","fetchExamReviewPolicy","fetchProctoringSettings","fetchExamAccessToken"],"sources":["../../src/data/api.js"],"sourcesContent":["import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { ExamAction } from '../constants';\nimport { generateHumanizedTime } from '../helpers';\n\nconst BASE_API_URL = '/api/edx_proctoring/v1/proctored_exam/attempt';\n\nasync function fetchActiveAttempt() {\n  // fetch 'active' (timer is running) attempt if it exists\n  const activeAttemptUrl = new URL(`${getConfig().EXAMS_BASE_URL}/api/v1/exams/attempt/latest`);\n  const activeAttemptResponse = await getAuthenticatedHttpClient().get(activeAttemptUrl.href);\n  return activeAttemptResponse.data;\n}\n\nasync function fetchAttemptForExamSequnceId(sequenceId) {\n  const attemptUrl = new URL(`${getConfig().EXAMS_BASE_URL}/api/v1/exams/attempt/latest`);\n  // the calls the same endpoint as fetchActiveAttempt but it behaves slightly different\n  // with an exam's section specified. The attempt for that requested exam is always returned\n  // even if it is not 'active' (timer is not running)\n  attemptUrl.searchParams.append('content_id', sequenceId);\n  const attemptResponse = await getAuthenticatedHttpClient().get(attemptUrl.href);\n  return attemptResponse.data;\n}\n\nexport async function fetchExamAttemptsData(courseId, sequenceId) {\n  let data;\n  if (!getConfig().EXAMS_BASE_URL) {\n    const url = new URL(\n      `${getConfig().LMS_BASE_URL}${BASE_API_URL}/course_id/${courseId}`,\n    );\n    url.searchParams.append('content_id', sequenceId);\n    url.searchParams.append('is_learning_mfe', true);\n    const urlResponse = await getAuthenticatedHttpClient().get(url.href);\n    data = urlResponse.data;\n  } else {\n    const examUrl = new URL(`${getConfig().EXAMS_BASE_URL}/api/v1/student/exam/attempt/course_id/${courseId}/content_id/${sequenceId}`);\n    const examResponse = await getAuthenticatedHttpClient().get(examUrl.href);\n    data = examResponse.data;\n\n    // humanize total time if response is from edx-exams\n    data.exam.total_time = Number.isInteger(data.exam.total_time)\n      ? generateHumanizedTime(data.exam.total_time * 60)\n      : data.exam.total_time;\n\n    const attemptData = await fetchActiveAttempt();\n    data.active_attempt = attemptData;\n  }\n  return data;\n}\n\nexport async function fetchLatestAttempt(courseId) {\n  let data;\n  if (!getConfig().EXAMS_BASE_URL) {\n    const url = new URL(\n      `${getConfig().LMS_BASE_URL}${BASE_API_URL}/course_id/${courseId}`,\n    );\n    url.searchParams.append('is_learning_mfe', true);\n    const urlResponse = await getAuthenticatedHttpClient().get(url.href);\n    data = urlResponse.data;\n  } else {\n    // initialize data dictionary to be similar to what edx-proctoring returns\n    data = { exam: {} };\n\n    const attemptData = await fetchActiveAttempt();\n    data.active_attempt = attemptData;\n  }\n  return data;\n}\n\nexport async function pollExamAttempt(pollUrl, sequenceId) {\n  let data;\n\n  // sites configured with only edx-proctoring must have pollUrl set\n  if (pollUrl) {\n    const edxProctoringURL = new URL(\n      `${getConfig().LMS_BASE_URL}${pollUrl}`,\n    );\n    const urlResponse = await getAuthenticatedHttpClient().get(edxProctoringURL.href);\n    data = urlResponse.data;\n\n    return data;\n\n  // exams configured with edx-exams expect sequenceId if pollUrl is not set when viewing the exam sequence\n  } if (sequenceId) {\n    data = await fetchAttemptForExamSequnceId(sequenceId);\n  // outside the exam sequence, we can't get the sequenceId easily, so here we just call the last active attempt\n  } else {\n    data = await fetchActiveAttempt();\n  }\n\n  // Update dictionaries returned by edx-exams to have correct status key for legacy compatibility\n  if (data.attempt_status) {\n    data.status = data.attempt_status;\n    delete data.attempt_status;\n  }\n\n  return data;\n}\n\nexport async function createExamAttempt(examId, legacyAttempt, startClock = true, attemptProctored = false) {\n  let urlString;\n  if (!getConfig().EXAMS_BASE_URL || legacyAttempt) {\n    urlString = `${getConfig().LMS_BASE_URL}${BASE_API_URL}`;\n  } else {\n    urlString = `${getConfig().EXAMS_BASE_URL}/api/v1/exams/attempt`;\n  }\n  const url = new URL(urlString);\n  const payload = {\n    exam_id: examId,\n    start_clock: startClock.toString(),\n    attempt_proctored: attemptProctored.toString(),\n  };\n  const { data } = await getAuthenticatedHttpClient().post(url.href, payload);\n  return data;\n}\n\nexport async function updateAttemptStatus(attemptId, action, legacyAttempt, detail = null) {\n  let urlString;\n  if (!getConfig().EXAMS_BASE_URL || legacyAttempt) {\n    urlString = `${getConfig().LMS_BASE_URL}${BASE_API_URL}/${attemptId}`;\n  } else {\n    urlString = `${getConfig().EXAMS_BASE_URL}/api/v1/exams/attempt/${attemptId}`;\n  }\n  const url = new URL(urlString);\n  const payload = { action };\n  if (detail) {\n    payload.detail = detail;\n  }\n  const { data } = await getAuthenticatedHttpClient().put(url.href, payload);\n  return data;\n}\n\nexport async function stopAttempt(attemptId, legacyAttempt = false) {\n  return updateAttemptStatus(attemptId, ExamAction.STOP, legacyAttempt);\n}\n\nexport async function continueAttempt(attemptId, legacyAttempt = false) {\n  return updateAttemptStatus(attemptId, ExamAction.START, legacyAttempt);\n}\n\nexport async function submitAttempt(attemptId, legacyAttempt = false) {\n  return updateAttemptStatus(attemptId, ExamAction.SUBMIT, legacyAttempt);\n}\n\nexport async function resetAttempt(attemptId, legacyAttempt = false) {\n  return updateAttemptStatus(attemptId, ExamAction.RESET, legacyAttempt);\n}\n\nexport async function endExamWithFailure(attemptId, error, legacyAttempt = false) {\n  return updateAttemptStatus(attemptId, ExamAction.ERROR, legacyAttempt, error);\n}\n\nexport async function softwareDownloadAttempt(attemptId, legacyAttempt = false) {\n  return updateAttemptStatus(attemptId, ExamAction.CLICK_DOWNLOAD_SOFTWARE, legacyAttempt);\n}\n\nexport async function declineAttempt(attemptId, legacyAttempt = false) {\n  return updateAttemptStatus(attemptId, ExamAction.DECLINE, legacyAttempt);\n}\n\nexport async function fetchExamReviewPolicy(examId) {\n  const url = new URL(\n    `${getConfig().LMS_BASE_URL}/api/edx_proctoring/v1/proctored_exam/review_policy/exam_id/${examId}/`,\n  );\n  const { data } = await getAuthenticatedHttpClient().get(url.href);\n  return data;\n}\n\nexport async function fetchProctoringSettings(courseId, examId) {\n  let url;\n  if (!getConfig().EXAMS_BASE_URL) {\n    url = new URL(`${getConfig().LMS_BASE_URL}/api/edx_proctoring/v1/proctored_exam/settings/exam_id/${examId}/`);\n  } else {\n    url = new URL(`${getConfig().EXAMS_BASE_URL}/api/v1/exam/provider_settings/course_id/${courseId}/exam_id/${examId}`);\n  }\n  const { data } = await getAuthenticatedHttpClient().get(url.href);\n  return data;\n}\n\nexport async function fetchExamAccessToken(examId) {\n  const url = new URL(\n    `${getConfig().EXAMS_BASE_URL}/api/v1/access_tokens/exam_id/${examId}/`,\n  );\n  const { data } = await getAuthenticatedHttpClient().get(url.href);\n  return data;\n}\n"],"mappings":"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"}