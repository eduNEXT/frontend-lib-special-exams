{"version":3,"file":"thunks.js","names":["_logging","require","_frontendPlatform","_api","_helpers","_slice","_constants","_handlers","_constants2","_interopRequireDefault","_proctorio","obj","__esModule","default","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","key","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","handleAPIError","error","dispatch","message","detail","setApiError","errorMsg","EXAM_START_TIMEOUT_MILLISECONDS","updateAttemptAfter","courseId","sequenceId","promiseToBeResolvedFirst","noLoading","setIsLoading","isLoading","response","exam_attempt_id","attemptData","fetchExamAttemptsData","setExamState","exam","activeAttempt","isEmpty","active_attempt","getExamAttemptsData","getLatestAttemptData","fetchLatestAttempt","getProctoringSettings","getState","specialExams","id","logError","proctoringSettings","fetchProctoringSettings","course_id","setProctoringSettings","examRequiresAccessToken","getConfig","EXAMS_BASE_URL","examAccessToken","fetchExamAccessToken","setExamAccessToken","startTimedExam","content_id","createExamAttempt","use_legacy_attempt_api","createProctoredExamAttempt","startProctoredExam","attempt","desktop_application_js_url","workerUrl","useWorker","window","Worker","examHasLtiProvider","useLegacyAttemptApi","startExamTimeoutMilliseconds","workerPromiseForEventNames","actionToMessageTypesMap","start","external_id","then","continueAttempt","attempt_id","catch","attemptId","attemptStatus","attempt_status","examId","notifyStartExam","skipProctoringExam","declineAttempt","pollAttempt","url","currentAttempt","ExamStatus","READY_TO_SUBMIT","data","pollExamAttempt","Error","updatedAttempt","time_remaining_seconds","status","setActiveAttempt","SUBMITTED","expireExamAttempt","stopExam","exam_url_path","examUrl","useLegacyAttemptAPI","stopAttempt","location","href","continueExam","resetExam","resetAttempt","submitExam","attemptExternalId","handleBackendProviderSubmission","submit","submitAttempt","expireExam","pingAttempt","timeoutInSeconds","pingApplication","endExamWithFailure","startProctoringSoftwareDownload","softwareDownloadAttempt","getExamReviewPolicy","fetchExamReviewPolicy","setReviewPolicy","policy","review_policy","getAllowProctoringOptOut","allowProctoringOptOut","setAllowProctoringOptOut","checkExamEntry","exam_type","ExamType","PROCTORED","IS_PROCTORED_STATUS","Promise","race","checkAppStatus","resolve","reject","setTimeout"],"sources":["../../src/data/thunks.js"],"sourcesContent":["import { logError } from '@edx/frontend-platform/logging';\nimport { getConfig } from '@edx/frontend-platform';\nimport {\n  fetchExamAttemptsData,\n  fetchLatestAttempt,\n  createExamAttempt,\n  stopAttempt,\n  continueAttempt,\n  submitAttempt,\n  pollExamAttempt,\n  fetchProctoringSettings,\n  softwareDownloadAttempt,\n  fetchExamReviewPolicy,\n  resetAttempt,\n  declineAttempt,\n  endExamWithFailure,\n  fetchExamAccessToken,\n} from './api';\nimport { isEmpty } from '../helpers';\nimport {\n  setIsLoading,\n  setExamState,\n  expireExamAttempt,\n  setActiveAttempt,\n  setProctoringSettings,\n  setExamAccessToken,\n  setReviewPolicy,\n  setApiError,\n  setAllowProctoringOptOut,\n} from './slice';\nimport { ExamStatus, ExamType, IS_PROCTORED_STATUS } from '../constants';\nimport { workerPromiseForEventNames, pingApplication } from './messages/handlers';\nimport actionToMessageTypesMap from './messages/constants';\nimport { checkAppStatus, notifyStartExam } from './messages/proctorio';\n\nfunction handleAPIError(error, dispatch) {\n  const { message, detail } = error;\n  dispatch(setApiError({ errorMsg: message || detail }));\n}\n\nconst EXAM_START_TIMEOUT_MILLISECONDS = 5000;\n\n/**\n * Fetch attempt data and update exam state after performing another action if it is provided.\n * It is assumed that action somehow modifies attempt in the backend, that's why the state needs\n * to be updated.\n * @param courseId - id of a course\n * @param sequenceId - id of a sequence\n * @param promiseToBeResolvedFirst - a promise that should get resolved before fetching attempt data\n * @param noLoading - if set to false shows spinner while executing the function\n */\nfunction updateAttemptAfter(courseId, sequenceId, promiseToBeResolvedFirst = null, noLoading = false) {\n  return async (dispatch) => {\n    if (!noLoading) { dispatch(setIsLoading({ isLoading: true })); }\n    if (promiseToBeResolvedFirst) {\n      try {\n        const response = await promiseToBeResolvedFirst;\n        if (!response || !response.exam_attempt_id) {\n          if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n          return;\n        }\n      } catch (error) {\n        handleAPIError(error, dispatch);\n        if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n      }\n    }\n    try {\n      const attemptData = await fetchExamAttemptsData(courseId, sequenceId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n    }\n  };\n}\n\nexport function getExamAttemptsData(courseId, sequenceId) {\n  return updateAttemptAfter(courseId, sequenceId);\n}\n\nexport function getLatestAttemptData(courseId) {\n  return async (dispatch) => {\n    dispatch(setIsLoading({ isLoading: true }));\n    try {\n      const attemptData = await fetchLatestAttempt(courseId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      dispatch(setIsLoading({ isLoading: false }));\n    }\n  };\n}\n\nexport function getProctoringSettings() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to get exam settings. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch proctoring settings. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const proctoringSettings = await fetchProctoringSettings(exam.course_id, exam.id);\n      dispatch(setProctoringSettings({ proctoringSettings }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function examRequiresAccessToken() {\n  return async (dispatch, getState) => {\n    if (!getConfig().EXAMS_BASE_URL) {\n      return;\n    }\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to get exam access token. No exam id.');\n      return;\n    }\n    try {\n      const examAccessToken = await fetchExamAccessToken(exam.id);\n      dispatch(setExamAccessToken({ examAccessToken }));\n    } catch (error) {\n      logError('Exam access token was not granted.');\n    }\n  };\n}\n\n/**\n * Start a timed exam\n */\nexport function startTimedExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to start exam. No exam id.');\n      handleAPIError(\n        { message: 'Failed to start exam. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      createExamAttempt(exam.id, exam.use_legacy_attempt_api),\n    )(dispatch);\n  };\n}\n\nexport function createProctoredExamAttempt() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to create exam attempt. No exam id.');\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      createExamAttempt(exam.id, exam.use_legacy_attempt_api, false, true),\n    )(dispatch);\n  };\n}\n\n/**\n * Start a proctored exam (including onboarding and practice exams)\n */\nexport function startProctoredExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const { attempt } = exam || {};\n    if (!exam.id) {\n      logError('Failed to start proctored exam. No exam id.');\n      return;\n    }\n    const { desktop_application_js_url: workerUrl } = attempt || {};\n    const useWorker = window.Worker && workerUrl;\n    const examHasLtiProvider = !exam.useLegacyAttemptApi;\n\n    if (useWorker) {\n      const startExamTimeoutMilliseconds = EXAM_START_TIMEOUT_MILLISECONDS;\n      workerPromiseForEventNames(actionToMessageTypesMap.start, exam.attempt.desktop_application_js_url)(\n        startExamTimeoutMilliseconds,\n        attempt.external_id,\n      ).then(() => updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        continueAttempt(attempt.attempt_id, attempt.use_legacy_attempt_api),\n      )(dispatch))\n        .catch(error => {\n          const message = error?.message || 'Worker failed to respond.';\n          logError(\n            message,\n            {\n              attemptId: attempt.attempt_id,\n              attemptStatus: attempt.attempt_status,\n              courseId: attempt.course_id,\n              examId: exam.id,\n            },\n          );\n          handleAPIError(\n            { message: 'Something has gone wrong starting your exam. Please double-check that the application is running.' },\n            dispatch,\n          );\n        });\n    } else {\n      if (examHasLtiProvider) {\n        notifyStartExam();\n      }\n      await updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        continueAttempt(attempt.attempt_id, attempt.use_legacy_attempt_api),\n      )(dispatch);\n    }\n  };\n}\n\nexport function skipProctoringExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to skip proctored exam. No exam id.');\n      return;\n    }\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptApi = exam.use_legacy_attempt_api;\n    if (attemptId) {\n      await updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        declineAttempt(attemptId, useLegacyAttemptApi),\n      )(dispatch);\n    } else {\n      await updateAttemptAfter(\n        exam.course_id,\n        exam.content_id,\n        createExamAttempt(exam.id, true, false, useLegacyAttemptApi),\n      )(dispatch);\n    }\n  };\n}\n\n/**\n * Poll exam active attempt status.\n * @param url - poll attempt url\n */\nexport function pollAttempt(url) {\n  return async (dispatch, getState) => {\n    const currentAttempt = getState().specialExams.activeAttempt;\n\n    // If the learner is in a state where they've finished the exam\n    // and the attempt can be submitted (i.e. they are \"ready_to_submit\"),\n    // don't ping the proctoring app (which action could move\n    // the attempt into an error state).\n    if (currentAttempt && currentAttempt.attempt_status === ExamStatus.READY_TO_SUBMIT) {\n      return;\n    }\n\n    try {\n      const { exam } = getState().specialExams;\n      const data = await pollExamAttempt(url, exam.content_id);\n      if (!data) {\n        throw new Error('Poll Exam failed to fetch.');\n      }\n      const updatedAttempt = {\n        ...currentAttempt,\n        time_remaining_seconds: data.time_remaining_seconds,\n        attempt_status: data.status,\n      };\n      dispatch(setActiveAttempt({\n        activeAttempt: updatedAttempt,\n      }));\n      if (data.status === ExamStatus.SUBMITTED) {\n        dispatch(expireExamAttempt());\n      }\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function stopExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n\n    if (!activeAttempt) {\n      logError('Failed to stop exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to stop exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const {\n      attempt_id: attemptId,\n      exam_url_path: examUrl,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await stopAttempt(attemptId, useLegacyAttemptAPI);\n        window.location.href = examUrl;\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(exam.course_id, exam.content_id, stopAttempt(attemptId, useLegacyAttemptAPI))(dispatch);\n  };\n}\n\nexport function continueExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to continue exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to continue exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      continueAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function resetExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to reset exam attempt. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to reset exam attempt. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(exam.course_id, exam.content_id, resetAttempt(attemptId, useLegacyAttemptAPI))(dispatch);\n  };\n}\n\nexport function submitExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n    const { desktop_application_js_url: workerUrl, external_id: attemptExternalId } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    const handleBackendProviderSubmission = () => {\n      // if a backend provider is being used during the exam\n      // send it a message that exam is being submitted\n      if (useWorker) {\n        workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)(0, attemptExternalId)\n          .catch(() => handleAPIError(\n            { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n            dispatch,\n          ));\n      }\n    };\n\n    if (!activeAttempt) {\n      logError('Failed to submit exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to submit exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const {\n      attempt_id: attemptId,\n      exam_url_path: examUrl,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await submitAttempt(attemptId, useLegacyAttemptAPI);\n        window.location.href = examUrl;\n        handleBackendProviderSubmission();\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(exam.course_id, exam.content_id, submitAttempt(attemptId, useLegacyAttemptAPI))(dispatch);\n    handleBackendProviderSubmission();\n  };\n}\n\nexport function expireExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n    const {\n      desktop_application_js_url: workerUrl,\n      attempt_id: attemptId,\n      external_id: attemptExternalId,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    if (!attemptId) {\n      logError('Failed to expire exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to expire exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    // this sure looks like a bug\n    await updateAttemptAfter(\n      activeAttempt.course_id,\n      exam.content_id,\n      submitAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n    dispatch(expireExamAttempt());\n\n    if (useWorker) {\n      workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)(0, attemptExternalId)\n        .catch(() => handleAPIError(\n          { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n          dispatch,\n        ));\n    }\n  };\n}\n\n/**\n * Ping provider application (used for proctored exams).\n * @param timeoutInSeconds - time to wait for worker response before raising an error\n * @param workerUrl - location of the worker from the provider\n */\nexport function pingAttempt(timeoutInSeconds, workerUrl) {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().specialExams;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    await pingApplication(timeoutInSeconds, activeAttempt.external_id, workerUrl)\n      .catch(async (error) => {\n        const message = error?.message || 'Worker failed to respond.';\n        /**\n         * Note: The exam id logged here represents the current section being rendered.\n         * This may be different from the exam they are currently attempting\n         * if the learner has navigated to other course content during the exam.\n         * */\n        logError(\n          message,\n          {\n            attemptId: activeAttempt.attempt_id,\n            attemptStatus: activeAttempt.attempt_status,\n            courseId: activeAttempt.course_id,\n            examId: exam.id,\n          },\n        );\n\n        // eslint-disable-next-line function-paren-newline\n        await updateAttemptAfter(\n          exam.course_id,\n          exam.content_id,\n          endExamWithFailure(activeAttempt.attempt_id, message, useLegacyAttemptAPI),\n        )(dispatch);\n      });\n  };\n}\n\nexport function startProctoringSoftwareDownload() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to start downloading proctoring software. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to start downloading proctoring software. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id,\n      exam.content_id,\n      softwareDownloadAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function getExamReviewPolicy() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    if (!exam.id) {\n      logError('Failed to fetch exam review policy. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch exam review policy. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const data = await fetchExamReviewPolicy(exam.id);\n      dispatch(setReviewPolicy({ policy: data.review_policy }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function getAllowProctoringOptOut(allowProctoringOptOut) {\n  return (dispatch) => {\n    dispatch(setAllowProctoringOptOut({ allowProctoringOptOut }));\n  };\n}\n\n/**\n * Check if we are allowed to enter an exam where proctoring has started.\n * There is no support for reentry with LTI. The exam must be completed\n * in the proctored window. If a non-proctored window is opened, the exam will\n * be ended with an error.\n *\n * This check is necessary to prevent using a second browser to access the exam\n * content unproctored.\n */\nexport function checkExamEntry() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().specialExams;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    // Check only applies to LTI exams\n    if (\n      !exam?.attempt\n      || exam.attempt.exam_type !== ExamType.PROCTORED\n      || exam.attempt.use_legacy_attempt_api\n    ) { return; }\n\n    if (IS_PROCTORED_STATUS(exam.attempt.attempt_status)) {\n      Promise.race([\n        checkAppStatus(),\n        new Promise((resolve, reject) => {\n          setTimeout(() => reject(), EXAM_START_TIMEOUT_MILLISECONDS);\n        }),\n      ]).catch(() => {\n        dispatch(setApiError({ errorMsg: 'Something has gone wrong with your exam. Proctoring application not detected.' }));\n        updateAttemptAfter(exam.course_id, exam.content_id, endExamWithFailure(exam.attempt.attempt_id, 'exam reentry disallowed', useLegacyAttemptAPI))(dispatch);\n      });\n    }\n  };\n}\n"],"mappings":"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"}